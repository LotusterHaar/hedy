%import common.CNAME -> NAME
%import common.DIGIT
%import common.LETTER
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE
PUNCTUATION: _EXCLAMATION_MARK | _QUESTION_MARK | _PERIOD //uppercase places tokens in tree
_ADD: "+"
_AND: "and"
_ASK : "ask"
_AT: "at"
_COLON: ":"
_COMMA: ","
_DIVIDE: "/"
_DOUBLE_EQUALS: "=="
_ECHO : "echo"
_ELIF: "elif"
_ELSE: "else"
_EOL: "\r"?"\n"
_EQUALS: "="
_EXCLAMATION_MARK: "!"
_FOR: "for"
_HASH: "#"
_IF: "if"
_IN: "in"
_INPUT: "input"
_IS: "is"
_LARGER: ">"
_LARGER_EQUALS: ">="
_LEFT_BRACKET : "("
_LEFT_SQUARE_BRACKET : "["
_LENGTH: "length"
_MULTIPLY: "*"
_NOT_EQUALS: "!="
_OR: "or"
_PERIOD: "."
_PRINT : "print"
_QUESTION_MARK: "?"
_RANGE: "range"
_REPEAT: "repeat"
_RIGHT_BRACKET : ")"
_RIGHT_SQUARE_BRACKET : "]"
_SMALLER : "<"
_SMALLER_EQUALS : "<="
_SPACE: " "
_STEP: "step"
_SUBTRACT: "-"
_TIMES: "times"
_TO: "to"
_WHILE: "while"
ask: var _SPACE+ _IS _SPACE _ASK _SPACE + (_SPACE | text | punctuation)*
assign: var _SPACE _IS _SPACE text -> assign
assign_list: var _SPACE _IS _SPACE text ((_COMMA _SPACE|_COMMA) text)+
command: print | ask | assign_list | assign | print_no_quotes | invalid //catch all at the end
echo: _ECHO (_SPACE text)?
index : NUMBER //todo FH-June 21 : why does this need its own rule? can't it just be a token
invalid: textwithoutspaces text?
invalid_space: _SPACE+ text
list_access: var " at " (index | random) -> list_access //todo: could be merged with list_access_var?
print: _PRINT _SPACE (_SPACE| list_access | quoted_text | var)*  -> print
print_no_quotes: _PRINT _SPACE (_SPACE| list_access | textwithoutspaces | punctuation)*  -> print_nq
program: _EOL* command (_SPACE)* (_EOL+ command (_SPACE)*)* _EOL* //lines may end on spaces and might be separated by many newlines
punctuation : PUNCTUATION -> punctuation
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \
quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
random : "random" //random needs to appear in the tree for further processing so does not start with _ or is uppercase
start: program
text: /([^\n,]+)/ -> text
textwithoutspaces: /([^\r\n,!?. *+-\/]+)/ -> text
var: NAME -> var