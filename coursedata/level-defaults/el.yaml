1:
    intro_text: |-
        Καλωσήρθες στη Hedy! Στο επίπεδο 1 μπορείς να χρησιμοποιήσεις τις εντολές `print`, `ask`, και `echo`.
        Στην αριστερή μπάρα μπορείς να δεις όλες τις εντολές του επιπέδου 1.

        Πάτησε το μπλε κουμπί και ο κώδικας θα πληκτρολογηθεί για σένα.

        Δοκίμασε και εσύ τον κώδικα πατώντας το πράσινο κουμπί 'Εκτέλεσε τον κώδικα' κάτω από το αριστερό προγραμματιστικό πεδίο.

        Δεν ξέρεις τί να δημιουργήσεις; Στις επόμενες καρτέλες θα βρεις μερικές ιδέες για το τί θα δημιουργήσεις
    start_code: 'print γειά σου κόσμε!'
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι με την `print`.'
        example: 'Παράδειγμα: print Γειά, καλωσήλθες στη Hedy!'
        demo_code: 'print Γειά, καλωσήλθες στη Hedy!'
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: 'Παράδειγμα: ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: 'ask Ποιό είναι το αγαπημένο σου χρώμα;'
    -   name: 'echo'
        explanation: 'Eπανάλαβε κάτι χρησιμποιώντας την `echo`.'
        example: 'Παράδειγμα: echo ώστε το αγαπημένο σου χρώμα είναι το...'
        demo_code: |-
            ask Ποιό είναι το αγαπημένο σου χρώμα;
            echo ώστε το αγαπημένο σου χρώμα είναι το...
2:
    intro_text: |-
        Στο επίπεδο 2 θα μάθουμε κάτι καινούριο. Μπορείς να ονοματίσεις μια λέξη με την `is`.
        Αν χρησιμοποιήσεις τον κώδικα `name is  Hedy`, μπορείς να χρησιμοποιήσεις το name οπουδήποτε στον κώδικά σου και αυτό θα αντικατασταθεί από τη λέξη Hedy.

        Σημείωση: Η `ask έχει αλλάξει`, μπορείς να αποθηκεύσεις την απάντηση με ένα όνομα , κάπως έτσι:
        ```
        answer is Ποιό είναι το όνομά σου;
        ```

        Η print λειτουργεί όπως και στο επίπεδο 1, και πλέον δεν χρειάζεσαι την `echo`.

        Στο επίπεδο 2 μπορείς να δημιουργήσεις μια λίστα. Μπορείς να αφήσεις τον υπολογιστή να επιλέξει κάτι τυχαία από τη λίστα. Αυτό γίνεται με τη χρήση της `at random`.

        Θα βρεις όλον τον κώδικα του επιπέδου 2 στην αριστερή μπάρα. Υπάρχουν επίσης καρτέλες με ασκήσεις.
    start_code: 'print γειά σου κόσμε!'
    commands:
    -   name: 'is'
        explanation: 'Δώσε ένα όνομα σε μια λέξη για να τη χρησιμοποιήσεις στο πρόγραμμα χρησιμοποιώντας την `is`'
        example: 'Παράδειγμα:  name is Hedy.'
        demo_code: |-
            name is Hedy
            print καλωσήλθες name
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`. Πρόσεξε! Πρέπει να δώσεις στην απάντηση ένα όνομα με την `is`.'
        example: 'Παράδειγμα: color is ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            print το color είναι το αγαπημένο σου!
    -   name: 'choose_random'
        explanation: 'Επίλεξε μια τυχαία λέξη από μια ομάδα με τις `at` και `random`'
        example: 'Παράδειγμα: animals is σκύλος, γάτα, καγκουρό.'
        demo_code: |-
            animals is σκύλος, γάτα, καγκουρό
            print animals at random
3:
    start_code: "print 'Γειά σου κόσμε'"
    intro_text: |-
        Η `ask` παραμένει ίδια στο επίπεδο 3, όμως η `print` είναι πλέον διαφορετική. Πρέπει να περικλείσεις το κείμενο που θέλεις να εμφανίσεις σε εισαγωγικά.

        Αυτό είναι χρήσιμο, επειδή τώρα μπορείς να εμφανίσεις όσες λέξεις θέλεις. Επίσης, τις λέξεις που αποθήκευες με την `is`.

        Οι περισσότερες γλώσσες προγραμματισμού χρησιμοποιούν εισαγωγικά όταν εμφανίζουν στην οθόνη, οπότε βρισκόμαστε ένα βημα πιο κοντά στον πραγματικό προγραμματισμό!

        ## Οι ασκήσεις γίνονται ολοένα και πιο δύσκολες
        Θα βρεις τις εντολές στα αριστερά και πάλι, και τις ασκήσεις στις ακόλουθες καρτέλες. Οι ασκήσεις πλέον γίνονται όλο και πιο δύσκολες στις διαδοχικές καρτέλες. Έτσι, είναι καλύτερα να ξεκινήσεις από τα αριστερά με την ιστορία, και να συνεχίσεις προς τα δεξιά για να δυσκολευτείς όλο και περισσότερο.
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print 'Γειά, καλωσήλθες στη Hedy.'"
        demo_code: "print 'Γειά, καλωσήλθες στη Hedy.'"
    -   name: 'is'
        explanation: 'Δώσε ένα όνομα σε κάποιο κείμενο και εμφάνισε με την `print` χωρίς εισαγωγικά'
        example: 'Παράδειγμα: name is Hedy.'
        demo_code: |-
            name is Hedy
            print 'Το όνομά μου είναι ' name
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: 'Example: color is ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;?
            print 'το ' color ' είναι το αγαπημένο σου!'
4:
    start_code: |-
        name is ask Ποιό είναι το όνομά σου;
        if name is Hedy print 'τέλεια!' else print 'έτσι κι έτσι'
    intro_text: |-
        Οι `ask` και `print` λειτουργούν ακριβώς όπως στο επίπεδο 3.

        Στο επίπεδο 4 υπάρχει κάτι νέο, την εντολή `if`! Με την `if` μπορείς να επιλέξεις ανάμεσα σε δύο διαφορετικές επιλογές.

        ## Παράδειγμα κώδικα Hedy
        ```
        name is ask ποιό είναι το όνομά σου;
        if name is Hedy print `ωραία` else print `μπου!`
        ```

        Αυτός ο κώδικας εμφανίζει 'ωραία' αν εισάγεις σαν όνομα το Hedy, και 'μπου!' αν εισάγεις κάτι άλλο.

        ## Οι ασκήσεις γίνονται όλο και πιο δύσκολες
        Επίσης στο επίπεδο 4, οι ασκήσιες στις καρτέλες γίνονται ολοένα και πιο δύσκολες. Οπότε καλό θα είναι να τις κάνεις από τα αριστέρα προς τα δεξιά.
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print 'Γειά, καλωσήλθες στη Hedy.'"
        demo_code: "print 'Γειά, καλωσήλθες στη Hedy.'"
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: 'Example: color is ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            print 'το ' color ' είναι το αγαπημένο σου!'
    -   name: 'if'
        explanation: 'Κάνε μια επιλογή με την `if`'
        example: "Παράδειγμα: if color is green print 'όμορφο!' else print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            if color is green print 'όμορφο!' else print 'έτσι κι έτσι'
5:
    start_code: "repeat 3 times print 'Η Hedy είναι διασκεδαστική!'"
    intro_text: |-
        Οι `ask`, `print` και `if` λειτουργούν ακριβώς όπως και στο Επίπεδο 4. Όμως, το Επίπεδο 5 προσθέτει την εντολή `repeat`. H Repeat (Επανάληψη) μπορεί να χρησιμποιηθεί για να εκτελέσουμε μια γραμμή κώδικα πολλές φορές.

        ## Παράδειγμα Κώδικα Hedy
        ```
        repeat 3 times print 'H Hedy είναι διασκεδαστική!'
        ```
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print 'Γειά, καλωσήλθες στη Hedy.'"
        demo_code: "print 'Γειά, καλωσήλθες στη Hedy.'"
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: 'Παράδειγμα: color is ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;?
            print 'το ' color ' είναι το αγαπημένο σου!
    -   name: 'if'
        explanation: 'Κάνε μια επιλογή με την `if`'
        example: "Παράδειγμα: if color is green print 'όμορφο!' else print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            if color is green print 'όμορφο!' else print 'έτσι κι έτσι'
    -   name: 'repeat'
        explanation: 'Οι `repeat` και `if` σε συνδυασμό'
        example: "Παράδειγμα: if color is green repeat 3 times print 'όμορφο!' else repeat 5 times print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            if color is green repeat 3 times print 'όμορφο!' else repeat 5 times print 'έτσι κι έτσι'
6:
    start_code: "print '5 επί 5 ίσον με ' 5 * 5"
    intro_text: |-
        Οι `ask`, `print`, `if` και `repeat` είναι ακόμα ίδιες όπως και στα Επίπεδα 4 και 5. Το Επίπεδο 6 προσθέτει κάτι καινούριο...Πλέον μπορείς να κάνεις υπολογισμούς.

        Στο επίπεδο 6 προστίθενται νέος κώδικας και μπορείς πλέον να κάνεις υπολογισμούς στον κώδικά σου.

        Το σύν είναι εύκολο, το γράφεις όπως στα μαθηματικά: για παράδειγμα `5+5`. Το πλην επίσης λειτουργεί μια χαρά, έτσι `5-5`.

        Το επί είναι λίγο διαφορετικό, επειδή δεν υπάρχει σύμβολο επί στο πληκτρολόγιο σου. Απλά ψάξε και θα δεις, δεν υπάρχει!
        Αυτός είναι ο λόγος που πολλαπλασιάζουμε με τον αστερίσκο στο πλήκτρο 8: `5 * 5`. Διάβαζε το σαν 5 φορές το 5 για να το θυμάσαι πιο εύκολα.
        ## Παράδειγμά κώδικα Hedy
        ```
        print '5 συν 5 κάνει ' 5 + 5
        print '5 πλην 5 κάνει ' 5 - 5
        print '5 επί 5 κάνει ' 5 * 5
        ```
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print '5 επί 5 ίσον με ' 5 * 5"
        demo_code: "print '5 επί 5 είναι ' 5 * 5"
    -   name: 'Οι `ask` και `if` με υπολογισμούς'
        explanation: 'Ρώτησε σχετικά με έναν υπολογισμό και έλεγξε ότι είναι σωστός.'
        example: 'Παράδειγμα: answer is ask Πόσο είναι 10 + 10;'
        demo_code: |-
            answer is ask Πόσο είναι 10 + 10;
            if answer is 20 print 'Ναι!' else print 'Ουπς'
    -   name: 'repeat'
        explanation: 'Οι `repeat` και `if` σε συνδυασμό'
        example: "Παράδειγμα: if color is green repeat 3 times print 'όμορφο!' else repeat 5 times print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            if color is green repeat 3 times print 'όμορφο!' else repeat 5 times print 'έτσι κι έτσι'
7:
    start_code: |-
        repeat 5 times
            print 'Γειά σας παιδιά'
            print 'Αυτό θα εμφανιστεί 5 φορές'
    intro_text: |-
        Οι ask και print λειτουργούν ακόμα όπως τις γνωρίζετε. Όμως, οι if και repeat έχουν αλλάξει!
        Τώρα μπορείτε να εκτελείτε μαζί ομάδες κώδικα, αλλά θα πρέπει να βάλετε εσοχή στον κώδικα. Αυτό σημαίνει να προσθέσετε τέσσερα κενά στην αρχή της γραμμής. Το ίδιο ισχύει όταν θέλετε να δημιουργήσετε ένα μπλοκ μιας γραμμής.

        ## Παράδειγμα κώδικα Hedy
        ```
        repeat 5 times
            print 'Γειά σας'
            print 'Αυτό θα επαναληφθεί 5 φορές'
        ```
        Αν συνδυάσετε μια repeat με μια if, θα πρέπει να βάλετε εσοχή σε κάθε μπλοκ. Δείτε το παράδειγμα κώδικα για περισσότερες λεπτομέρειες!

        ## Παράδειγμα κώδικα Hedy
         ```
         color is ask Ποιό είναι το αγαπημένο σου χρώμα;
         if color is πράσινο
             repeat 3 times
                 print 'όμορφο!'
         else
             repeat 5 times
                 print 'όχι τόσο όμορφο'
         ```


    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι. Θυμήσου να χρησιμοποιήσεις εισαγωγικά για ακριβή εμφάνιση.'
        example: "Παράδειγμα: print '5 επί 5 ίσον με ' 5 * 5"
        demo_code: "print '5 επί 5 ίσον με ' 5 * 5"
    -   name: 'Η `if` με πολλαπλές γραμμές'
        explanation: 'Ρώτησε την απάντηση σε ένα άθροισμα και έλεγξε αν είναι σωστή. Μπορούμε τώρα να εμφανίσουμε 2 γραμμές.'
        example: 'Παράδειγμα: answer is ask Πόσο είναι 5 συν 5?'
        demo_code: |-
            answer is ask Πόσο είναι 5 συν 5;
            if answer is 10
                print 'Μπράβο!'
                print 'Πράγματι, η απάντηση ήταν ' answer
            else
                print 'Ουπς!'
                print 'Η απάντηση είναι 10'
    -   name: 'if and repeat combined'
        explanation: 'Οι `if` και `repeat` σε συνδυασμό'
        example: "Παράδειγμα: if color is πράσινο repeat 3 times print 'όμορφο!' else repeat 5 times print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            if color is πράσινο
              repeat 3 times
                print 'όμορφο!'
            else
              repeat 5 times
                print 'έτσι κι έτσι'
8:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Έτοιμοι ή όχι, έρχομαι!'
    intro_text: 'Η `print` λειτουργεί ακριβώς όπως και πριν, όμως η `repeat` τώρα αντικαθίσταται από τη `for`! Θα χρησιμοποιείς `for i in range 1 to 5`, αντί για `repeat 5 times`. Μπορείς επίσης να χρησιμοποιείς το `i` στο πρόγραμμα σου! Θυμήσου να χρησιμοποιείς εσοχές ύστερα από κάθε δήλωση `for` και `if` (Αυτό σημαίνει να ξεκινάς μια πρόταση με 4 κενά)'
    commands:
    -   name: 'repeat'
        explanation: 'αντικαθιστούμε τη `repeat` με τη `for`'
        example: 'for i in range 1 to 10'
        demo_code: |
            for i in range 1 to 10
              print i
            print 'Έτοιμοι ή όχι, έρχομαι!'
9:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Έτοιμοι ή όχι, έρχομαι!'
    intro_text: 'Τώρα θα αλλάξουμε λίγο τις εσοχές. Κάθε φορά που χρειαζόμαστε μια εσοχή, χρειαζόμαστε ένα `:` στη γραμμή πριν την εσοχή.'
    commands:
    -   name: 'for με :'
        explanation: 'Όταν χρησιμοποιούμε μια `for`, πρέπει να προσθέσουμε ένα `:` ύστερα από τη δήλωση `for`!'
        example: 'for i in range 1 to 10:'
        demo_code: |-
            for i in range 1 to 11:
                print i
            print 'Έτοιμοι ή όχι, έρχομαι!'
    -   name: 'if με :'
        explanation: 'Θα πρέπει να κάνουμε το ίδιο με όλες μας τις δηλώσεις `if`'
        example: "if colour is πράσινο:'"
        demo_code: |-
            colour is πράσινο
            if colour is πράσινο:
                print 'To χρώμα είναι πράσινο'
            else:
                print 'Το χρώμα δεν είναι πράσινο'
    -   name: '(Προαιρετικό) elif'
        explanation: 'Θα σου δείξουμε μια νέα εντολή που επιτρέπεται να χρησιμοποιείς: την `elif`. H `elif` σημαίνει "else if" ( αλλιώς αν ). Θα ξεκινήσουμε ελέγχοντας αν η `if` είναι αληθής. Αν αυτή δεν είναι αληθής, ελέγχουμε την `elif` και αν επίσης δεν είναι αληθής, πηγαίνουμε στην `else`.'
        example: 'elif a is 5:'
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'το a είναι 2'
            else:
                print 'το a δεν είναι 1 ή 2'
10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'βρισκόμαστε στο γύρο: ' i ' και μετράμε: ' j
    intro_text: 'Από εδώ και στο εξής, μπορούμε να επαναλαμβάνουμε ένα βρόχο περισσότερες φορές. Στο παράδειγμα, μετράμε ως το 5 και το κάνουμε αυτό 3 φορές. Άρα, κάνουμε 3 γύρους και μετράμε ως το 5 κάθε φορά.'
    commands:
    -   name: 'διαδοχικές for'
        explanation: 'Αυτό είναι ένα παράδειγμα με τη δήλωση for'
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'βρισκόμαστε στο γύρο: ' i ' και μετράμε: ' j
    -   name: 'διαδοχικές if'
        explanation: 'Μπορούμε να κάνουμε το ίδιο με τις δηλώσεις if'
        demo_code: |-
            colour is μπλε
            colourtwo is κίτρινο
            if colour is μπλε:
                if colourtwo is κίτρινο:
                    print 'Μαζί κάνουμε το χρώμα πράσινο!'
11:
    start_code: |-
        age is input('Ποιά είναι η ηλικία σου;')
        print('Άρα έχεις υπάρξει σε αυτές τις ηλικίες:')
        for i in range(0,age):
            print(i)
    intro_text: 'Θα βάλουμε παρενθέσεις και θα αλλάξουμε την ask! Αλλάζουμε την ask σε input! Στις print, ask και for, θα βάλουμε πλέον παρενθέσεις.'
    commands:
    -   name: 'Print (Εμφάνισε)'
        explanation: 'Τώρα θα προσθέσουμε παρενθέσεις γύρω από την print!'
        example: "Για παράδειγμα: print('Γειά σου Κόσμε')"
        demo_code: "print('Γειά σου Κόσμε')"
    -   name: 'Από την ask στην input!'
        explanation: 'Αφαιρούμε την ask και την ονομάζουμε input πλέον, επίσης θα βάλουμε παρενθέσεις γύρω της'
        example: "Για παράδειγμα: answer is input('Ποιό είναι το όνομά σου;')"
        demo_code: |-
            answer is input('Ποιό είναι το όνομά σου;')
            print('Άρα το όνομά σου είναι ' answer)
    -   name: 'For με παρενθέσεις'
        explanation: 'Τώρα βάζουμε παρενθέσεις γύρω από τους αριθμούς στο βρόχο for. for i in range (0,10):'
        example: 'Για παράδειγμα: for i in range(0,10):'
        demo_code: |-
            for i in range(0,10):
                print(i)
            print('Έτοιμοι ή όχι, έρχομαι!')


12:
    start_code: |-
        fruit is ['μήλο', 'μπανάνα', 'κεράσι']
        print(fruit)
    intro_text: "Θα βάλουμε αγκύλες γύρω από τις λίστες! Επίσης θα πρέπει να βάλουμε μονά εισαγωγικά (') γύρω από κάθε αντικείμενο στις λίστες. "
    commands:
    -   name: 'Αγκύλες γύρω από λίστες'
        explanation: "Θα βάλουμε αγκύλες γύρω από τις λίστες! Επίσης θα πρέπει να βάλουμε μονά εισαγωγικά (') γύρω από κάθε αντικείμενο στις λίστες."
        example: "Για παράδειγμα: fruit is ['μήλο', 'μπανάνα', 'κεράσι']"
        demo_code: |-
            fruit is ['μήλο', 'μπανάνα', 'κεράσι']
            print(fruit)
    -   name: 'Πάρε ένα αντικείμενο από μία λίστα'
        explanation: 'Για να πάρουμε ένα αντικείμενο από μια λίστα χρησιμοποιούμε [αριθμός] έτσι fruit[1] σημαίνει, πάρε το πρώτο φρούτο από τη λίστα!'
        example: 'Για παράδειγμα: firstfruit is fruit[1]'
        demo_code: |-
            fruit is ['μήλο', 'μπανάνα', 'κεράσι'']
            firstfruit is fruit[1]
            print(firstfruit)
    -   name: 'Πάρε ένα τυχαίο αντικείμενο από μία λίστα'
        explanation: 'Για να πάρουμε ένα τυχαίο αντικείμενο από τη λίστα χρησιμοποιούμε [random] έτσι fruit[random] σημαίνει, πάρε ένα τυχαίο φρούτο από τη λίστα!'
        example: 'Για παράδειγμα: randomfruit is fruit[random]'
        demo_code: |-
            fruit is ['μήλο', 'μπανάνα', 'κεράσι'']
            randomfruit is fruit[random]
            print(randomfruit)
13:
    start_code: |-
        you_are_still_here is False
        are_you_still_here is input('Είσαι ακόμα εδώ; ναι ή όχι;')
        if are_you_still_here is ναι:
            you_are_still_here is True
        if you_are_still_here is True:
            print('Γειά!')
        if you_are_still_here is False:
            print('Αντίο!')
    intro_text: 'Συζητάμε λοιπόν αν θα κάνουμε μια μεταβλητή αληθή `True` ή ψευδή `False`, μπορείς να ορίσεις κάθε μεταβλητή σαν `True` και `False`. Μπορείς να το κάνεις αυτό για να παρακολουθείς κάθε απάντηση.'
    commands:
    -   name: 'Παράδειγμα'
        explanation: 'Σε αυτό το παράδειγμα, χρησιμοποιούμε το `True` και `False` για να παρακολουθείς την απάντηση σε μια ερώτηση. Μπορείς να απαντήσεις 5 φορές. Αν η απάντηση είναι σωστή, η good_answer θα είναι `True`.'
        example: 'good_answer is `False`'
        demo_code: |-
            for i in range(1,5):
                good_answer is False
                answer is input('Πόσο κάνει 5*5;')
                if answer is 25:
                    good_answer is True
                else:
                    good_answer is False
                if good_answer is True:
                    print('Αυτό είναι σωστό!')
                if good_answer is False:
                    print('Αυτό είναι λάθος! Απομένουν ' 5-i ' προσπάθειες ')
    -   name: 'Ανάθεσε τιμή'
        explanation: 'Αν θέλουμε να πούμε πως η μεταβλητή με το όνομα answer είναι 8, τότε λέμε answer = 8.'
        example: 'Για παράδειγμα: answer = 8'
        demo_code: |-
            print('Πόσο κάνει 5+3?')
            answer = 5+3
            print('η απάντηση τώρα είναι:')
            print(answer)
    -   name: 'Σύγκρινε και ανάθεσε τιμή'
        explanation: 'Αν θέλουμε να συγκρίνουμε δυο τιμές, χρησιμοποιούμε ==. Αν είναι να αναθέσουμε τιμή σε μια μεταβλητή, χρησιμοποιούμε =. '
        example: 'Για παράδειγμα: 5+3 == 8, answer = 8'
        demo_code: |-
            print('Πόσο κάνει 5+3;')
            answer = 5+3
            print('η απάντηση τώρα είναι:')
            print(answer)
            if answer == 8:
              print('Αυτό είναι σωστό!')
            else:
              print('Όχι, αυτό είναι λάθος!')
14:
    start_code: |-
        you_are_still_here is False
        are_you_still_here is input('Είσαι ακόμα εδώ; ναι ή όχι;')
        if are_you_still_here is ναι:
            you_are_still_here is True
        answer is input('Πόσο κάνει 5*5;')
        if you_are_still_here is True and answer is 25:
            print('Απάντησες ναι και ήταν σωστή απάντηση')
    intro_text: Τώρα θα μάθουμε τα `and` και `or`! Αν θέλεις να ελέγξεις δύο δηλώσεις, δεν χρειάζεται να χρησιμοποίησεις δύο if αλλά μπορείς να χρησιμοποιήσεις τα `and` και `or`. Αν χρησιμοποιήσεις τo `and`, και οι δύο προτάσεις, αριστερά και δεξιά από το `and` θα πρέπει να είναι αληθείς. Μπορούμε επίσης να χρησιμοποιήσουμε το `or`. Τότε, μόνο μια πρόταση χρειάζεται να είναι αληθής.
    commands:
    -   name: Και
        explanation: Και οι δύο προτάσεις (αριστερά και δεξιά από το `and`) πρέπει να είναι αληθείς.
        example: if 3+2 is 5 and 2+2 is 4
        demo_code: |-
            answer1 is input('Πόσο κάνει 3+2;')
            answer2 is input('Πόσο κάνει 2+2;')
            if answer1 is 5 and answer2 is 4:
                print('Και οι δύο απαντήσεις είναι σωστές!')
            else:
                print('Τουλάχιστον μια απάντηση είναι λανθασμένη!')
    -   name: Ή
        explanation: '`Or` Τουλάχιστον 1 από τις προτάσεις αριστερά και δεξιά από το `or`, οφείλει να είναι αληθής, αν και οι δύο είναι σωστές και αυτό είναι μια χαρά.'
        example: if 3+2 is 5 or 2+2 is 4
        demo_code: |-
            answer1 is input('Πόσο κάνει 3+2;')
            answer2 is input('Πόσο κάνει 2+2;')
            if answer1 is 5 and answer2 is 4:
            if answer1 is 5 or answer2 is 4:
                print('Τουλάχιστον μία απάντηση είναι σωστή!')
            else:
                print('Και οι δύο απαντήσεις είναι λανθασμένες!')
15:
    start_code: |-
        # Αυτό είναι ένα πρόγραμμα που θα ρωτήσεις κάποιες ερωτήσεις μαθηματικών
        for i in range(1,10):
            # Θα ρωτήσουμε τον πίνακα πολλαπλασιασμού του 5
            answer is input('Πόσο κάνει ' i ' φορές το 5?')
            # Ελέγχουμε αν η απάντηση είναι ίδια με το άθροισμά μας
            correct_answer is i * 5
            if answer is correct_answer:
                print(answer ' είναι σωστό')
            else:
                print('Αυτό είναι λάθος, θα έπρεπε να είναι: ' i*5)
    intro_text: |-
        Όταν κάνεις μεγαλύτερα προγράμματα, θα πρέπει να βρεις έναν τρόπο να θυμάσαι τί κάνει κάθε κομμάτι κώδικα. Για αυτόν το σκοπό χρησιμοποιούμε τα σχόλια. Ένα σχόλιο μοιάζει κάπως έτσι:
        ` # Αυτό είναι ένα σχόλιο`.
        Οτιδήποτε μετά το # θα είναι αόρατο για τον κώδικα.
    commands:
    -   name: Σχόλιο
        explanation: Μπορούμε να τοποθετήσουμε σχόλια όπου θέλουμε
        example: '# Αυτό είναι ένα σχόλιο'
        demo_code: |-
            # Αυτό το πρόγραμμα εμφανίζει γειά
            # Δημιουργήθηκε με τη Hedy
            # Δεν κάνει τίποτα άλλο εκτός από το να εμφανίζει Γειά
            print('γειά!')
16:
    start_code: |-
        age is input('Πόσο χρονών είσαι;')
        if age < 12:
            print('Είσαι νεότερη από εμένα!')
        elif age > 12:
            print('Είσαι μεγαλύτερη από εμένα!')
    intro_text: Θα μάθουμε μερικά ακόμα νέα πράγματα! Ίσως να τα γνωρίζεις ήδη από τα μαθηματικά, τα `<` και `>`. Το `<` ελέγχει αν ο πρώτος αριθμός είναι μικρότερος από το δεύτερο, πχ `4 < 5`. To `>` ελέγχει αν ο πρώτος αριθμός είναι μεγαλύτερος από το δεύτερο, πχ `6 > 5`.
    commands:
    -   name: Μικρότερο
        explanation: Χρησιμοποιούμε το `<` για να ελέγξουμε αν ο πρώτος αριθμός είναι μικρότερος από το δεύτερο αριθμό. Για παράδειγμα, αν θέλουμε να δούμε αν μια μεταβλητή είναι μικρότερη από 15, χρησιμοποιούμε `variable < 15`
        example: 'Για παράδειγμα: age < 12'
        demo_code: |-
            age is input('Πόσο χρονών είσαι?')
            if age < 12:
                print('Είσαι νεότερη από εμένα!')
    -   name: Μεγαλύτερο
        explanation: Χρησιμοποιούμε το `>` για να ελέγξουμε αν ο πρώτος αριθμός είναι μεγαλύτερος από το δεύτερο αριθμό. Για παράδειγμα, αν θέλουμε να δούμε αν μια μεταβλητή είναι μεγαλύτερη από 15, χρησιμοποιούμε `variable > 15`
        example: 'Για παράδειγμα: age > 12'
        demo_code: |-
            age is input('Πόσο χρονών είσαι?')
            if age > 12:
                print('Είσαι μεγαλύτερη από εμένα!')
17:
    start_code: |-
        correct_answer is False
        # συνεχίζουμε ώσπου να δοθεί η σωστή απάντηση!
        while correct_answer is False:
            answer is input('Πόσο κάνει 5 φορές το 5;')
            if answer is 25:
                correct_answer is True
                print('Δόθηκε η σωστή απάντηση')
    intro_text: Θα μάθουμε ένα νέο βρόχο, το βρόχο `while`! Συνεχίζουμε το βρόχο για όσο η πρόταση είναι αληθής/ορθή! Έτσι στο παράδειγμα κώδικα, συνεχίζουμε ώσπου να δοθεί μια σωστή απάντηση. Αν δε δοθεί ποτέ η σωστή απάντηση, ο βρόχος δε θα σταματήσει ποτέ!
    commands:
    -   name: Boolean while
        explanation: Μπορούμε να χρησιμοποιήσουμε το βρόχο `while` με το `True` και `False`
        example: 'Παράδειγμα: while correct_answer is False'
        demo_code: |-
            correct_answer is False
            # συνεχίζουμε ώσπου να δοθεί η σωστή απάντηση!
            while correct_answer is False:
                answer is input('Πόσο κάνει 5 φορές το 5;')
                if answer is 25:
                    correct_answer is True
                    print('Δόθηκε η σωστή απάντηση')
    -   name: Μικρότερο while
        explanation: Μπορούμε επίσης να χρησιμοποιήσουμε το βρόχο `while` με το `<` και το `>`. Προσοχή όμως, θα χρειαστεί να αλλάζετε τον αριθμό ώστε να τελειώσει ο βρόχος. Το κάνουμε αυτό με το count is count + 1.
        example: 'Για παράδειγμα: while count < 3'
        demo_code: |-
            count is 1
            # συνεχίζουμε ώσπου το count να είναι ίσο με 3!
            while count < 3:
                print('Το κάνουμε αυτό ' 3 - count ' ακόμα φορές')
                count is count + 1
            print('Τελειώσαμε')
