1:
    intro_text: |
        Bienvenue à Hedy! Au niveau 1, tu peux utiliser les commandes `print`,` ask` et `echo`.

        Sur le côté gauche de votre écran se trouvent toutes les commandes du niveau 1.

        Appuyez sur le bouton bleu et le code sera tapé pour toi!

        Essayez le code toi-même avec le bouton vert «Exécuter le code» sous le champ de programmation de gauche.

        Vous ne savez pas quoi programmer? Dans les onglets suivants, vous trouverez des idées sur les éléments à construire.
    start_code: "print bonjour le monde!"
    commands:
    -   name: "print"
        explanation: "Affiche quelque chose avec `print`."
        example: "Exemple: print Bonjour et bienvenue à Hedy!"
        demo_code: "print Bonjour et bienvenue à Hedy!"
    -   name: "ask"
        explanation: "Demande quelque chose avec `ask`."
        example: "Exemple: ask Quelle est ta couleur préférée?"
        demo_code: "ask Quelle est ta couleur préférée?"
    -   name: "echo"
        explanation: "Répète quelque chose avec `echo`."
        example: "Exemple: echo donc ta couleur préférée est..."
        demo_code: |-
            ask Quelle est ta couleur préférée?
            echo donc ta couleur préférée est...
2:
    intro_text: |
        Au niveau 2, nous apprenons quelque chose de nouveau. Vous pouvez nommer un mot avec `is`.

        Si vous mettez le code `name is Hedy` en haut de votre programme, vous pouvez alors utiliser name partout. Cela sera alors remplacé par Hedy.

        Le `ask` a changé au niveau 2, vous enregistrez également la réponse avec un nom:

        ```
        reponse is quel est votre nom?
        ```

        L'impression fonctionne toujours comme au niveau 1 et vous n'avez plus besoin d'une échographie.

        Au niveau 2, vous pouvez également faire une liste. Vous pouvez ensuite choisir n'importe quoi dans la liste. Vous faites cela avec `at random` (vous dites: et ren-dom).

        Vous trouverez tous les codes du niveau 2 dans la barre de gauche. Il existe également des onglets avec des affectations.
    start_code: "print bonjour le monde!"
    commands:
    -   name: "is"
        explanation: "Donne un nom à un mot que tu peux utiliser dans le programme avec `is`"
        example: "Exemple: nom is Hedy."
        demo_code: |-
            nom is Hedy
            print bienvenue nom
    -   name: "ask"
        explanation: "Demande quelque chose avec `ask`. Attention! Tu dois donner à la réponse un nom avec `is`."
        example: "Exemple: couleur is ask Quelle est ta couleur préférée?"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            print couleur est ton préféré !
    -   name: "choisi_au hasard"
        explanation: "Choisi un mot au hasard dans un groupe avec `at random`"
        example: "Exemple: animaux is chien, chat, kangourou"
        demo_code: |-
            animaux is chien, chat, kangourou
            print animaux at random
3:
    start_code: "print 'Bonjour le monde'"
    intro_text: |
        `ask` fonctionne de la même manière au niveau 3 qu'au niveau 2, mais `print` est différent maintenant.

        Vous devez placer le texte que vous souhaitez imprimer entre guillemets.

        Ceci est utile, car vous pouvez désormais imprimer tous les mots souhaités. Aussi les mots que vous avez utilisés pour stocker quelque chose avec `is`.

        La plupart des langages de programmation utilisent également des guillemets lors de l'impression, nous nous rapprochons donc également de la programmation réelle!

        ## Les affectations deviennent de plus en plus difficiles
        Vous retrouverez les commandes sur la gauche et les affectations dans les onglets suivants. Les affectations deviennent de plus en plus difficiles dans les onglets successifs.
        Il est donc préférable de commencer à gauche avec l'histoire, et de travailler à droite pour être de plus en plus contestée.
    commands:
    -   name: "print"
        explanation: "Afficher exactement ce qui est entre les guilllemets"
        example: "Exemple: print 'Bonjour et bienvenue à Hedy.'"
        demo_code: "print 'Bonjour et bienvenue à Hedy.'"
    -   name: "is"
        explanation: "Donne un nom à un mot que tu peux utiliser dans le programme sans guillemets"
        example: "Exemple: nom is Hedy."
        demo_code: |-
            nom is Hedy
            print 'mon nom est ' nom
    -   name: "ask"
        explanation: "Demande quelque chose avec `ask`."
        example: "Exemple: couleur is ask Quelle est ta couleur préférée?"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            print couleur ' est ta couleur préférée!'
4:
    start_code: |-
        nom is ask quel est ton nom?
        if nom is Hedy print 'cool!' else print 'mouais'
    intro_text: |
        `ask` et` print` fonctionnent toujours comme au niveau 3.

         Au niveau 4, il y a quelque chose de nouveau, le `if`! If est l'anglais pour se. Avec le `if`, vous pouvez choisir entre deux options différentes.

         ## Exemple de code Hedy
         ```
         nom is ask quel est votre nom?
         if nom is Hedy print 'cool!' else print 'moins amusant!'
         ```

         Ce code s'imprime cool! si vous entrez Hedy comme nom, et moins amusant! si vous entrez autre chose.

         ## Les affectations deviennent de plus en plus difficiles

         Toujours au niveau 4, les affectations dans les onglets deviennent de plus en plus difficiles. Alors faites-les de gauche à droite.
    commands:
    -   name: "print"
        explanation: "Affiche exactement ce qui est entre les guilllemets"
        example: "Exemple: print 'Bonjour et bienvenue à Hedy.'"
        demo_code: "print 'Bonjour et bienvenue à Hedy.'"
    -   name: "ask"
        explanation: "Demande quelque chose avec `ask`."
        example: "Exemple: couleur is ask Quelle est ta couleur préférée?"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            print couleur ' est ta couleur préférée!'
    -   name: "if"
        explanation: "Fait un choix avec `if`."
        example: "Exemple: if couleur is vert print 'joli!' else print 'bof'"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            if couleur is vert print 'joli!' else print 'bof'
5:
    start_code: "repeat 3 times print 'Hedy est amusant!'"
    intro_text: |
        `ask`, `print` et `if` fonctionnent exactement comme au niveau 4.
        Le niveau 5 ajoute la commande `repeat`.
        `repeat` te permet d’exécuter une ligne de commande plusieurs fois.
        ## Exemple de code Hedy
        ```
        repeat 3 times print 'Hedy est amusant!'
        ```
    commands:
    -   name: "print"
        explanation: "Affiche exactement ce qui est entre les guilllemets"
        example: "Exemple: print 'Bonjour et bienvenue à Hedy.'"
        demo_code: "print 'Bonjour et bienvenue à Hedy.'"
    -   name: "ask"
        explanation: "Demande quelque chose avec `ask`."
        example: "Exemple: couleur is ask Quelle est ta couleur préférée?"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            print couleur ' est ta couleur préférée!'
    -   name: "if"
        explanation: "Fait un choix avec `if`."
        example: "Exemple: if couleur is vert print 'joli!' else print 'bof'"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            if couleur is vert print 'joli!' else print 'bof'
    -   name: "repeat"
        explanation: "`repeat` et `if` combiné"
        example: "Exemple: if couleur is vert  repeat 3 times print 'joli!' else repeat 5 times print 'bof'"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            if couleur is vert repeat 3 times print 'joli!' else repeat 5 times print 'bof'
6:
    start_code: "print '5 fois 5 font ' 5 * 5"
    intro_text: |
        `ask`,` print`, `if` et `repeat` fonctionnent toujours comme dans les niveaux 4 et 5.
         Mais au niveau 6, il y a quelque chose de nouveau, vous pouvez maintenant aussi calculer.

         Au niveau 6, de nouveaux codes sont ajoutés, vous pouvez maintenant commencer à calculer dans votre code.

         Le plus est simple, vous l'écrivez comme avec les maths: `5 + 5` par exemple. Le moins fonctionne également très bien, qui est `5 - 5`.

         Le fois sont un peu différentes, car il n'y a pas de fois sur votre clavier. Cherchez, il n'y en a vraiment pas!
         C'est pourquoi nous faisons les temps avec l'astérisque au-dessus de 8: `5 * 5`. Lisez cela comme 5 fois 5, alors vous vous en souviendrez le plus facile.
         ## Exemple de code Hedy
         ```
         print '5 plus 5 est ' 5 + 5
         print '5 moins 5 est ' 5 - 5
         print '5 fois 5 est ' 5 * 5
         ```
    commands:
    -   name: "print"
        explanation: "Affiche exactement ce qui est entre les guilllemets"
        example: "Exemple: print '5 fois 5 font ' 5 * 5"
        demo_code: "print '5 fois 5 font ' 5 * 5"
    -   name: "ask et if avec des calculs"
        explanation: "Pose une question sur un calcul avec `ask` et compare le résultat..."
        example: "Exemple: reponse is ask Combien font 10 plus 10?"
        demo_code: |-
            reponse is ask Combien font 10 plus 10?
            if reponse is 20 print 'Oui!' else print 'Oups'
    -   name: "repeat"
        explanation: "`repeat` et `if` combinés"
        example: "Exemple: if produit is 50 repeat 3 times print 'correct!' else repeat 5 times print 'incorrect!'"
        demo_code: |-
            produit is ask Combien font 10 fois 5?
            if produit is 50 repeat 3 times print 'correct!' else repeat 5 times print 'incorrect!'
7:
    start_code: |-
        repeat 5 times
            print 'Bonjour les amis'
            print 'Ceci sera affiché 5 fois'
    intro_text: |
        `ask` et `print` fonctionnent comme tu y es habitué. Mais `if` et `repeat` ont changé!
        Tu peux maintenant exécuter des groupes de commandes ensemble, mais tu dois indenter ces commandes.
        Cela veut dire que tu dois mettre 4 espaces au début des lignes.
        Cela fonctionne aussi si tu veux créer un bloc d’une seule ligne.

        ## Exemple de code Hedy
        ```
        repeat 5 times
            print 'Bonjour les amis'
            print 'Ceci sera affiché 5 fois'
        ```

        Si tu combines un if et un repeat, tu devras indenter chaque bloc. Regarde les exemples pour plus de détails!"

        ## Exemple de code Hedy
        ```
        couleur is ask Quelle est ta couleur préférée?
        if couleur is vert
            repeat 3 times
                print 'joli!'
        else
            repeat 5 times
                print 'bof'
        ```

    commands:
    -   name: "print"
        explanation: "Affiche quelque chose. N’oublies pas les guillemets pour afficher exactement ce qui est saisi."
        example: "Exemple: print '5 fois 5 font ' 5 * 5"
        demo_code: "print '5 fois 5 font ' 5 * 5"
    -   name: "`if` sur plusieurs lignes"
        explanation: "Demande la réponse d’une addition et vérifie si elle est correcte. Tu peux désormais imprimer sur 2 lignes."
        example: "Exemple: reponse is ask Combien font 5 plus 5?"
        demo_code: |-
            reponse is ask Combien font 5 plus 5?
            if reponse is 10
                print 'Bien joué!'
                print 'En effet, la réponse est ' reponse
            else
                print 'Oups!'
                print 'La réponse devrait être 10.'
    -   name: "`if` et `repeat` combinés"
        explanation: "`if` et `repeat` combinés"
        example: "Exemple: if couleur is vert repeat 3 times print 'joli!' else repeat 5 times print 'bof'"
        demo_code: |-
            couleur is ask Quelle est ta couleur préférée?
            if couleur is vert
                repeat 3 times
                    print 'joli!'
            else
                repeat 5 times
                    print 'bof'


8:
    start_code: |-
        for i in range 1 to 11
            print i
        print ' Cache toi ou je te verrai !'
    intro_text: "`print` fonctionne encore comme avant, mais `repeat` est changé ! Tu tape maintenant `for i in range 1 to 5`, au lieu de `repeat 5 times`. La bonne chose est que tu peux également utiliser cette variable i dans ton programme! Tu dois encore toujours mettre en retrait toutes les lignes répétitives (cela signifie qu'elles doivent commencer par quatre espaces)"
    commands:
    -   name: " nouveau `repeat`"
        explanation: " `for` au lieu de `repeat`"
        example: "for i in range 1 to 11"
        demo_code: |
            for i in range 1 to 11
                print i
            print ' Cache toi ou je te verrai !'
9:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Cache toi ou je te verrai !'
    intro_text: "Maintenant on change encore un petit chose concernant l'indentation. Chaque fois que nous indentons, il faut ajouter un `:` à la fin du règle précédente."
    commands:
    -   name: "`for` avec `:`"
        explanation: "Utilisant un `for` sur plusieurs lignes, il te faut un `:` à la fin"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 10:
                print i
            print ' Cache toi ou je te verrai !.
    -   name: "`if` avec `:`"
        explanation: "Nous faisons de la même manière avec tous nos commandes `if`."
        example: "if couleur is vert:"
        demo_code: |-
            couleur is ask Quelle couleur préfères-tu ?
            if couleur is vert:
                print 'Tu as choisi le vert.'
            else
                print 'Tu as choisi un autre couleur que le vert.'
    -   name: "(Optionnel) `elif`"
        explanation: "Pour compléter il-y-a encore un nouveau commande quelle tu peux utiliser: `elif`. `Elif` signifie `else if`. Tu regardes alors auparavant à `if` et quand ça n'est pas vrai, tu avances à `elif`. Quand ça n'est pas vrai aussi, tu avances à `else`."
        example: "elif a is 5"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a est égal à 1'
            elif a is 2:
                print 'a est égal à 2'
            else:
                print 'a est ni 1 ni 2'


10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'Le résultat de: ' i ' fois ' j ’ fait 'i*j 
    intro_text: "À partir de maintenant nous pouvons exécuter un boucle plusieurs fois. Dans l'exemple nous comptons trois fois de un à cinq. Alors nous répétons trois fois un boucle de cinq fois."
    commands:
    -   name: "`for` dans un autre `for`."
        explanation: "Ceci est un exemple de deux boucles de `for` combinés."
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'Le résultat de: ' i ' fois ' j ’ fait 'i*j 
    -   name: "`if` dans un autre `if`."
        explanation: "Nous pouvons faire le même truc avec `if`."
        demo_code: |-
            couleur1 is ask Donne-moi une couleur :
            couleur2 is ask Donne-moi encore une couleur
            if couleur1 is bleu:
                if couleur2 is jaune:
                    print 'Ensemble ça donne vert !'
