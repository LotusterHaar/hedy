1:
    intro_text: |
        Welcome to Hedy! In Level 1 you can use the commands `print`, `ask` and `echo`.

        In the left bar you can see all commands of level 1.

        Press the blue button and the code will be typed for you!

        Try the code yourself with the green 'Run the code' button under the left programming field.

        Don't know what to create? In the next tabs you find some ideas for what to build.
    start_code: "print hello world!"
    commands:
    -   explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print Hello welcome to Hedy!"
    -   explanation: "Ask something with `ask`."
        example: "Example: ask What is your favorite color?"
        demo_code: "ask What is your favorite color?"
    -   explanation: "Repeat something using `echo`."
        example: "Example: echo so your favorite color is..."
        demo_code: |-
            ask What is your favorite color?
            echo so your favorite color is...
2:
    intro_text: |
        In level 2 we learn something new. You can name a word with `is`.

        If you use the code `name is Hedy`, you can use name anywhere in your code and it will be replaced by Hedy.

        Note: `ask` has changed, you also save the answer with a name, like this:

        ```
        answer is What is your name?
        ```

        Print still works as in Level 1, and you no longer need `echo`.

        In level 2 you can also make a list. You can have the computer choose something random from the list. You do that with 'at random'.

        You find all the codes of level 2 in the left bar. There are also tabs with assignments.
    start_code: "print hello world!"
    commands:
    -   explanation: "Give a word a name to use in the program using `is`"
        example: "Example: name is Hedy."
        demo_code: |-
            name is Hedy
            print welcome name
    -   explanation: "Ask something with `ask`. Beware! You need to give the answer a name with `is`."
        example: "Example: color is ask What is your favorite color?"
        demo_code: |-
            color is ask What is your favorite color?
            print color is your favorite!
    -   explanation: "Choose a random word from a group with `at` and `random`"
        example: "Example: animals is dog, cat, kangaroo."
        demo_code: |-
            animals is dog, cat, kangaroo
            print animals at random
3:
    start_code: "print 'Hello world'"
    intro_text: |
        `ask` works the same in level 3 as it did in level 2, but` print` is different now.

         You must put text that you want to print between quotation marks.

         This is useful, because now you can print all the words you want. Also the words you used to store something with `is`.

         Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!

         ## Assignments are getting more and more difficult
         You will find the commands on the left again, and assignments in the following tabs. The assignments are now getting more and more difficult in the successive tabs.
         So it is best to start on the left with the story, and work to the right, in order to be challenged more and more.
    commands:
    -   explanation: "Print exactly using quotation marks"
        example: "Example: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   explanation: "Give a name to some text and `print` without quotation marks"
        example: "Example: name is Hedy."
        demo_code: |-
            name is Hedy
            print 'my name is ' name
    -   explanation: "Ask something with `ask`."
        example: "Example: color is ask What is your favorite color?"
        demo_code: |-
            color is ask What is your favorite color?
            print color ' is your favorite!'
4:
    start_code: |-
        name is ask what is your name?
        if name is Hedy print 'cool!' else print 'meh'
    intro_text: |
        `ask` and` print` still like they did in level 3.

         In level 4 there is something new, the `if`! With the `if` you can choose between two different options.

         ## Example Hedy Code
         ```
         name is ask what's your name?
         if name is Hedy print 'nice' else print 'boo!'
         ```

         This code prints nice if you enter Hedy as a name, and boo! if you enter something else.

         ## Assignments are getting more and more difficult

         Also in level 4 the assignments in the tabs become more and more difficult. So, do them from left to right.
    commands:
    -   explanation: "Print exactly using quotation marks"
        example: "Example: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   explanation: "Ask something with `ask`."
        example: "Example: color is ask What is your favorite color?"
        demo_code: |-
            color is ask What is your favorite color?
            print color ' is your favorite!'
    -   explanation: "Make a choice with `if`"
        example: "Example: if color is green print 'pretty!' else print 'meh'"
        demo_code: |-
            color is ask What is your favorite color?
            if color is green print 'pretty!' else print 'meh'
5:
    start_code: "repeat 3 times print 'Hedy is fun!'"
    intro_text: |
        `ask`, `print` and `if` work exactly like they did in Level 4.
        But Level 5 adds the `repeat` command. Repeat can be used to execute a line of code multiple times.
        ## Example Hedy code
        ```
        repeat 3 times print 'Hedy is fun!'
        ```
    commands:
    -   explanation: "Print exactly using quotation marks"
        example: "Example: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   explanation: "Ask something with `ask`."
        example: "Example: color is ask What is your favorite color?"
        demo_code: |-
            color is ask What is your favorite color?
            print color ' is your favorite!'
    -   explanation: "Make a choice with `if`"
        example: "Example: if color is green print 'pretty!' else print 'meh'"
        demo_code: |-
            color is ask What is your favorite color?
            if color is green print 'pretty!' else print 'meh'
    -   explanation: "`repeat` and `if` combined"
        example: "Example: if color is green repeat 3 times print 'pretty!' else repeat 5 times print 'meh'"
        demo_code: |-
            color is ask What is your favorite color?
            if color is green repeat 3 times print 'pretty!' else repeat 5 times print 'meh'
6:
    start_code: "print '5 times 5 is ' 5 * 5"
    intro_text: |
        `ask`,` print`, `if` and` repeat` still work as in level 4 and 5.
         But in Level 6 there is something new, you can now also calculate.

         In level 6 new codes are added, you can now start calculating in your code.

         The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

         The times is a bit different, because there are is no times symbol on your keyboard. Just search, there really isn't!
         That is why we multiply with the asterisk above 8: `5 * 5`. Read that as 5 times 5 then you will remember it the easiest.
         ## Example Hedy code
         ```
         print '5 plus 5 is ' 5 + 5
         print '5 minus 5 is ' 5 - 5
         print '5 times 5 is ' 5 * 5
         ```
    commands:
    -   explanation: "Print exactly using quotation marks"
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   explanation: "Ask for a calculation and check that it is correct."
        example: "Example: answer is ask What is 10 plus 10?"
        demo_code: |-
            answer is ask What is 10 plus 10?
            if answer is 20 print 'Yes!' else print 'Oops'
    -   explanation: "`repeat` and `if` combined"
        example: "Example: if product is 50 repeat 3 times print 'correct!' else repeat 5 times print 'incorrect!'"
        demo_code: |-
            product is ask What is 10 times 5?
            if product is 50 repeat 3 times print 'correct!' else repeat 5 times print 'incorrect!'
7:
    start_code: |-
        repeat 5 times
            print 'Hello folks'
            print 'This will be printed 5 times'
    intro_text: |
        `ask` and `print` still work as you know them. But `if` and `repeat` have changed!
        You can now execute groups of code together, but you will have to indent the code.
        That means putting four spaces at the beginning of the line. This also holds when you just want to create a block of one line.

        ## Example Hedy code
        ```
        repeat 5 times
            print 'Hello everyone'
            print 'This is all repeated 5 times'
        ```
        If you combine a repeat and an if, you will need to indent each block. Have a look at the example code for more details!"

         ## Example Hedy code
         ```
         color is ask What is your favorite color?
         if color is green
             repeat 3 times
                 print 'beautiful!'
         else
             repeat 5 times
                 print 'not so beautiful'
         ```

    commands:
    -   explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer is ask What is 5 plus 5?"
        demo_code: |-
            answer is ask What is 5 plus 5?
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
    -   explanation: "`if` and `repeat` combined"
        example: "Example: if color is green repeat 3 times print 'pretty!' else repeat 5 times print 'meh'"
        demo_code: |-
            color is ask What is your favorite color?
            if color is green
                repeat 3 times
                    print 'pretty!'
            else
                repeat 5 times
                    print 'meh'
7-1:
    start_code: "for counter is 1 to 5\n    print counter"
    intro_text:
        "`print` works just the same but the `repeat` is now replaced by `for`!
        You can now write `for counter is 1 to 5` and use `counter` in your program.
        Try it out to see what happens!
        Remember to use indentations after the `for` and `if` statements (That means starting a sentence with four spaces)"
    commands:
    -   name: "for loop"
        explanation: "We replace `repeat` with `for` and add a range"
        example: "for counter is 1 to 5"
        demo_code: "for counter is 1 to 5\n    print counter"
    -   explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer is ask What is 5 plus 5?"
        demo_code: |-
            answer is ask What is 5 plus 5?
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
8:
    start_code: "for counter in range 1 to 5\n    print counter"
    intro_text:
        "`print` works just the same but the `repeat` is now replaced by `for`!
        You can now write `for counter in range 1 to 5` and use `counter` in your program. Try it out to see what happens!
        Remember to use indentations after the `for` and `if` statements (That means starting a sentence with four spaces)"
    commands:
    -   name: "for loop"
        explanation: "We replace `repeat` with `for` and add a range"
        example: "for counter in range 1 to 5"
        demo_code: "for counter in range 1 to 5\n    print counter"
    -   explanation: "Ask for the answer to a sum and check if it is correct. We can now print 2 lines."
        example: "Example: answer is ask What is 5 plus 5?"
        demo_code: |-
            answer is ask What is 5 plus 5?
            if answer is 10
                print 'Well done!'
                print 'Indeed, the answer was ' answer
            else
                print 'Oops!'
                print 'The answer is 10'
9:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Ready or not, here I come!'
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation."
    commands:
    -   explanation: "When we use a `for`, we need to put a `:` behind the `for` statement!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 11:
                print i
            print 'Ready or not, here I come!'
    -   explanation: "We need to do the same with all of our `if` statements"
        example: "if colour is green:'"
        demo_code: |-
            colour is green
            if colour is green:
                print 'The colour is green'
            else:
                print 'The colour is not green'
    -   explanation: "We will show you a new command that you are allowed to use: `elif`. `elif` means \"else if\". We start with checking if the `if` is correct, if that one is not true, we check the `elif` and if that one is also not true, we go to the `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'a is 2'
            else:
                print 'a is not 1 or 2'
10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'we are in round: ' i ' and we count: ' j
    intro_text: "From now on, we can repeat a loop more often. In the example we count to 5 and do that 3 times. So we do 3 rounds and count to 5 every time."
    commands:
    -   explanation: "This is an example with the `for` statement"
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'we are in round: ' i ' and we count: ' j
    -   explanation: "We can do the same with `if` statements"
        demo_code: |-
            colour is blue
            colourtwo is yellow
            if colour is blue:
                if colourtwo is yellow:
                    print 'Together we make green!'
11:
    start_code: |-
        age is input('What is your age?')
        print('So you have been these ages:')
        for i in range(0, age):
            print(i)
    intro_text: "We are going to use round brackets and we are going to change ask! We change ask into input! With print, input and for we will use round brackets now."
    commands:
    -   explanation: "We are going to use brackets with print now!"
        example: "For example: print('Hello World')"
        demo_code: "print('Hello World')"
    -   explanation: "We remove ask and call it input now. Also we are going to use brackets."
        example: "For example: name is input('What is your name?')"
        demo_code: |-
            name is input('What is your name?')
            print('So your name is ' name)
    -   explanation: "We are now putting brackets around the numbers in the for loop. for i in range (0, 10):"
        example: "For example: for i in range(0, 10):"
        demo_code: |-
            for i in range(0, 10):
                print(i)
            print('Ready or not, here I come')
12:
    start_code: |-
        fruit is ['apple', 'banana', 'cherry']
        print(fruit)
    intro_text: "We are going to put square brackets around lists! Also we now need to put single quotation marks (') around items in lists. "
    commands:
    -   explanation: "We are going to put square brackets around lists! We also need to put ' around items in lists."
        example: "For example: fruit is ['apple', 'banana', 'cherry']"
        demo_code: |-
            fruit is ['apple', 'banana', 'cherry']
            print(fruit)
    -   name: "Get an item from a list"
        explanation: "To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!"
        example: "For example: firstfruit is fruit[1]"
        demo_code: |-
            fruit is ['banana', 'apple', 'cherry']
            firstfruit is fruit[1]
            print(firstfruit)
    -   name: "Get a random item from a list"
        explanation: "To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!"
        example: "For example: randomfruit is fruit[random]"
        demo_code: |-
            fruit is ['banana', 'apple', 'cherry']
            randomfruit is fruit[random]
            print(randomfruit)
13:
    start_code: |-
        you_are_still_here is False
        are_you_still_here is input('Are you still here? yes or no?')
        if are_you_still_here is yes:
            you_are_still_here is True
        if you_are_still_here is True:
            print('Hello!')
        if you_are_still_here is False:
            print('Bye!')
    intro_text: "We are now talking about making a variable `True` or `False`, you can put a variable on `True` and on `False`. You can use this to keep track of a certain answer."
    commands:
    -   name: "Example"
        explanation: "In this example, we use `True` and `False` to keep track of the answer of a question. You can answer 5 times. If the answer is correct, good_answer will be `True`."
        example: "good_answer is `False`"
        demo_code: |-
          for i in range(1, 5):
              good_answer is False
              answer is input('What is 5*5')
              if answer is 25:
                  good_answer is True
              else:
                  good_answer is False
              if good_answer is True:
                  print('That is correct!')
              if good_answer is False:
                  print('That is wrong! ' 5-i ' attempts left')
14:
    start_code: |-
        you_are_still_here is False
        are_you_still_here is input('Are you still here? yes or no?')
        if are_you_still_here is yes:
            you_are_still_here is True
        answer is input('What is 5*5?')
        if you_are_still_here is True and answer is 25:
            print('You said yes and gave a good answer')
    intro_text: "We are now going to learn `and` and `or`! If you want to check two statements, you don't have to use two if's but can use `and` and `or`. If you use `and`, both statements, left and right of the `and` need to be true. We can also use `or`. Then only one statement needs to be correct."
    commands:
    -   name: "And"
        explanation: "Both statements (left and right of the `and`) need to be correct."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
          answer1 is input('What is 3+2?')
          answer2 is input('What is 2+2?')
          if answer1 is 5 and answer2 is 4:
              print('Both answers are correct!')
          else:
              print('At least one answer is wrong!')
    -   name: "Or"
        explanation: "`Or` At least 1 of the two statements left and right of the `or`, needs to be correct, if both are correct, it is also fine."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
          answer1 is input('What is 3+2?')
          answer2 is input('What is 2+2?')
          if answer1 is 5 or answer2 is 4:
              print('At least one answer is correct!')
          else:
              print('Both answers are wrong!')
15:
    start_code: |-
        # This is a program that is going to ask a couple of math questions
        for i in range(1, 10):
            # We are going to ask the multiplication table of 5
            answer is input('What is ' i ' times 5?')
            # We check if the answer is the same as our sum
            correct_answer is i * 5
            if answer is correct_answer:
                print(answer ' is correct')
            else:
                print('That is wrong, it is supposed to be: ' i*5)
    intro_text: "When you are making bigger programs, you will need to find a way to remember what every piece of code does. We use comments for this. A comment looks the following:\n ` # This is a comment`. Everything after the # will be invisible for the code."
    commands:
    -   name: "Comment"
        explanation: "We can place comments wherever we want."
        example: "# This is a comment"
        demo_code: |-
            # This program prints Ηello!
            # It has been made in Hedy
            # It does nothing except print Hello!
            print('Ηello!')
16:
    start_code: |-
        age is input('How old are you?')
        if age < 12:
            print('You are younger than me!')
        elif age > 12:
            print('You are older than me!')
    intro_text: "We are going to learn more new items! You might know them already from mathematics, the `<` and `>`. The `<` checks if the first number is smaller than the second, like `4 < 5`. The `>` checks if the first number is bigger than the second, like `6 > 5`."
    commands:
    -   name: "Smaller"
        explanation: "We use the `<` to check if the first number is smaller than the second number. For example if we want to see if a variable is smaller than 15, we use `variable < 15`"
        example: "For example: age < 12"
        demo_code: |-
            age is input('How old are you?')
            if age < 12:
                print('You are younger than me!')
    -   name: "Bigger"
        explanation: "We use the `>` to check if the first number is bigger than the second number. For example if we want to see if a variable is bigger than 15, we use `variable > 15`."
        example: "For example: age > 12"
        demo_code: |-
            age is input('How old are you?')
            if age > 12:
                print('You are older than me!')
17:
    start_code: |-
        correct_answer is False
        # we continue until the correct answer has been given!
        while correct_answer is False:
            answer is input('What is 5 times 5?')
            if answer is 25:
                correct_answer is True
                print('A good answer has been given')
    intro_text: "We are going to learn a new loop, the `while` loop! We continue the loop as long as the statement is true/valid! So at the example code, we continue until a correct answer has been given. If the correct answer is never given, the loop never ends!"
    commands:
    -   name: "Boolean while"
        explanation: "We can use the `while` loop with `True` and `False`"
        example: "Example: while correct_answer is False"
        demo_code: |-
            correct_answer is False
            # we continue until the correct answer has been given!
            while correct_answer is False:
                answer is input('What is 5 times 5?')
                if answer is 25:
                    correct_answer is True
                    print('A good answer has been given')
    -   name: "Smaller while"
        explanation: "We can also use the `while` loop with `<` and `>`. Be careful, you need to change the number so the loop ends. We do that with count is count + 1 now."
        example: "For example: while count < 3"
        demo_code: |-
            count is 1
            # we continue until count is 3!
            while count < 3:
                print('We do this ' 3 - count ' more times')
                count is count + 1
            print('We are done')
18:
    start_code: |-
        list is ['first', 'second', 'third']
        secondvalue is list[2]
        print(secondvalue)
    intro_text: "When we have a list, we can take a specific value from the list. If we want the second item from the list, we type `list[2]`."
    commands:
    -   name: "Count"
        explanation: "We can also sum up all values from a list"
        example: "list[1]"
        demo_code: |-
            list is ['1', '2', '3']
            sum is list[1] + list[2]
            sum is sum + list[3]
            # we expect a 6 here
            print(sum)
19:
    start_code: |-
        fruit is ['apple', 'banana', 'cherry']
        for i in range(1, 3):
            print(fruit[i])
    intro_text: "We can also see everyting in a list with the for loop. Because there are three things in the list, we take the loop from 1 to 3. Now we print everything in the loop."
    commands:
    -   name: "Length of list"
        explanation: "With `length` we can see the size of a list. The list in the example is 3 because there are three things in the list"
        example: "length(list)"
        demo_code: |-
            fruit is ['apple', 'banana', 'cherry']
            print('length of list is ' length(fruit))
            for i in range(1, length(fruit)):
                print(fruit[i])
20:
    start_code: |-
        print('What is 5+3?')
        answer = 5+3
        print('answer is now:')
        print(answer)
        if answer == 8:
            print('That is correct!')
        else:
            print('Oh no, that is wrong!')
    intro_text: "Now we are going to change is into `=` and `==`. We use `=` if we want to assign a value to a variable. If you want to assign 8 to the variable called anser, we do answer = 8. `==` we use when we want to see if two things are the same."
    commands:
    -   name: "Compare"
        explanation: "If we want to compare, we use ==. 5+3 == 8 checks if 5+3 equals 8"
        example: "For example: 5+3 == 8"
        demo_code: |-
            if 5+3 == 8:
                print('5+3 is indeed 8')
            else:
                print('This will not be printed because 5+3 is 8!')
    -   name: "Assign Value"
        explanation: "If we want to say that a variable called answer is 8, we do answer = 8."
        example: "For example: answer = 8"
        demo_code: |-
            print('What is 5+3?')
            answer = 5+3
            print('answer is now:')
            print(answer)
    -   name: "Compare and assign value"
        explanation: "If we are going to compare two values, we use `==`. If we are going to assign a variable, we use `=`. "
        example: "For example: 5+3 == 8, answer = 8"
        demo_code: |-
            print('What is 5+3?')
            answer = 5+3
            print('answer is now:')
            print(answer)
            if answer == 8:
                print('That is correct!')
            else:
                print('No, that is wrong!')
21:
    start_code: |-
        country = input('Where do you live?')
        if land != Netherlands:
            print('Cool!')
        else:
            print('I am also from the Netherlands!')
    intro_text: "We are going to learn a new item, the `!=` . The ! means not and the = means equal so != means not equal. For example 5 != 4."
    commands:
    -   name: "Not equal"
        explanation: "If we are checking if two things are not equal, we use `!=`"
        example: "For example: 5+3 != 9"
        demo_code: |-
            number = input('You are not allowed to say 5, what is a cool number?')
            if getal != 5:
                print('Good job!')
            else:
                print('You were not allowed to say 5!')
22:
    start_code: |-
        age = input('I am 12 years old, how old are you?')
        if age <= 11:
            print('You are younger than I am!')
        elif age >= 13:
            print('You are older than I am!')
    intro_text: "We are going to combine < and = now. If we want to see if something is smaller or equal than the second number, we use `<=`. We can also check if something is bigger or equal than the second number with `>=`."
    commands:
    -   name: "Smaller equal"
        explanation: "`<=` checks if the number on the left of the `<=` is smaller or equal than the one on the right. So 5 < 5 is not true because 5 is not smaller than 5 but 5 <= 5 is true because 5 is smaller or equal to 5. 6 <= 5 is not true."
        example: "For example: age <= 12"
        demo_code: |-
            age = input('I am 13 years old, how old are you?')
            if age <= 12:
                print('You are younger than I am!')
    -   name: "Larger equal"
        explanation: "`>=` checks if the number on the left of the `>=` is bigger or equal than the one on the right. So 5 > 5 is not true because 5 is not bigger than 5 but 5 >= 5 is true because 5 is smaller or equal to 5. 4 >= 5 is not true."
        example: "For example: age >= 12"
        demo_code: |-
            age = input('I am 11 years old, how old are you?')
            if age >= 12:
                print('You are older than I am!')
