1:
    intro_text: |
        Benvenuto in Hedy! Nel Livello 1 puoi usare i comandi `print`,` ask` e `echo`.

        Sul lato sinistro dello schermo ci sono tutti i comandi del Livello 1.

        Premi il pulsante blu e il codice verrà digitato per te!

        Prova tu stesso il codice con il pulsante verde 'Esegui il codice' sotto il campo di programmazione a sinistra.

        Non sai cosa programmare? Nelle schede successive trovi alcune idee su cosa costruire.
    start_code: "print ciao mondo!"
    commands:
    -   name: "print"
        explanation: "Scrivi qualcosa con `print`."
        example: "Esempio: print Ciao benvenuta/o su Hedy!"
        demo_code: "print Ciao benvenuta/o su Hedy!"
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: ask Qual è il tuo colore preferito?"
        demo_code: "ask Qual è il tuo colore preferito?"
    -   name: "echo"
        explanation: "Ripeti qualcosa usando `echo`."
        example: "Esempio: echo Quindi il tuo colore preferito è..."
        demo_code: |-
            ask Qual è il tuo colore preferito?
            echo Quindi il tuo colore preferito è...
2:
    intro_text: |
        Nel livello 2 impariamo qualcosa di nuovo. Puoi nominare una parola con `is`.

        Se metti il codice `nome is Hedy` all'inizio del tuo programma, puoi usare nome ovunque. Quello sarà poi sostituito da Hedy.

        La `ask` è cambiata nel livello 2, salva anche la risposta con un nome:

        ```
        risposta is come ti chiami?
        ```

        La stampa funziona ancora come nel livello 1 e non è più necessaria un'ecografia.

        Nel livello 2 puoi anche fare una lista. Puoi quindi scegliere qualsiasi cosa dall'elenco. Lo fai con "a caso" (dici: et ren-dom).

        Troverai tutti i codici di livello 2 nella barra di sinistra. Ci sono anche schede con compiti.
    start_code: "print ciao mondo!"
    commands:
    -   name: "is"
        explanation: "Dà un nomignolo da usare nel programma ad una parola con `is`."
        example: "Esempio: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print benvenuta nome
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`. Attenzione! Devi dare alla risposta un nome con `is`."
        example: "Esempio: colore is ask Qual è il tuo colore preferito?"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            print colore è il tuo preferito!
    -   name: "scegli_acaso"
        explanation: "Scegli una parola a caso da un gruppo con `at` e `random`"
        example: "Esempio: animali is cane, gatto, canguro."
        demo_code: |-
            animali is cane, gatto, canguro
            print animali at random
3:
    start_code: "print 'Ciao mondo'"
    intro_text: |
        "ask" funziona allo stesso modo nel livello 3 come nel livello 2, ma ora `print` è diverso.

        È necessario inserire il testo che si desidera stampare tra virgolette.

        Questo è utile, perché ora puoi stampare tutte le parole che desideri. Anche le parole che hai usato per memorizzare qualcosa con `is`.

        La maggior parte dei linguaggi di programmazione utilizza anche le virgolette durante la stampa, quindi ci stiamo avvicinando anche alla programmazione reale!

        ## Le assegnazioni stanno diventando sempre più difficili
        Troverai di nuovo i comandi sulla sinistra e le assegnazioni nelle seguenti schede. Le assegnazioni stanno diventando sempre più difficili nelle schede successive.
        Quindi è meglio iniziare a sinistra con la storia e lavorare a destra per essere sempre più sfidati.
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Esempio: print 'Ciao benvenuta/o su Hedy.'"
        demo_code: "print 'Ciao benvenuta/o su Hedy.'"
    -   name: "is"
        explanation: "Dai un nomignolo ad un testo e scrivilo con `print` senza usare le virgolette"
        example: "Esempio: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'Il mio nome è ' nome
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: colore is ask Qual è il tuo colore preferito?"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            print colore ' è il tuo preferito!'
4:
    start_code: |-
        nome is ask Come ti chiami?
        if nome is Hedy print 'che bello!' else print 'mah'
    intro_text: |
        `ask` e` print` funzionano ancora come nel livello 3.

         Nel livello 4 c'è qualcosa di nuovo, il `if`! If è l'inglese per se. Con `if` puoi scegliere tra due diverse opzioni.

         ## Esempio di codice Hedy
         ```
         nome is ask come ti chiami?
         if nome is Hedy print 'carino' else print 'meno divertente!'
         ```

         Questo codice viene stampato carino se inserisci Hedy come nome e meno divertente se inserisci qualcos'altro.

         ## Le assegnazioni stanno diventando sempre più difficili

         Anche a livello 4, gli incarichi nelle schede diventano sempre più difficili. Quindi fallo da sinistra a destra.
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Example: print 'Ciao benvenuta/o su Hedy.'"
        demo_code: "print 'Ciao benvenuta/o su Hedy.'"
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: colore is ask Qual è il tuo colore preferito?"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            print colore ' è il tuo preferito!'
    -   name: "if"
        explanation: "Fai una scelta con `if`."
        example: "Esempio: if colore is verde print 'carino!' else print 'mah'"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            if colore is verde print 'carino!' else print 'mah'
5:
    start_code: "repeat 3 times print 'Hedy è divertente!'"
    intro_text: |
        `ask`, `print` e `if` funzionano esattamente come funzionavano nel quarto livello.
        Il quinto livello introduce il comando `repeat`.
        `repeat` può essere usato per ripetere una parte di codice 'x' volte.
        ## Esempio di codice Hedy
        ```
        repeat 3 times print 'Hedy è divertente!'
        ```
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Example: print 'Ciao benvenuta/o su Hedy.'"
        demo_code: "print 'Ciao benvenuta/o su Hedy.'"
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: colore is ask Qual è il tuo colore preferito?"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            print colore ' è il tuo preferito!'
    -   name: "if"
        explanation: "Fai una scelta con `if`."
        example: "Esempio: if colore is verde print 'carino!' else print 'mah'"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            if colore is verde print 'carino!' else print 'mah'
    -   name: "repeat"
        explanation: "`repeat` e `if` combinati insieme"
        example: "Esempio: if colore is verde repeat 3 times print 'carino!' else repeat 5 times print 'mah'"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            if colore is verde repeat 3 times print 'carino' else repeat 5 times print 'mah'
6:
    start_code: "print '5 per 5 è ' 5 * 5"
    intro_text: |
        `ask`,` print`, `if` e` repeat` funzionano ancora come nei livelli 4 e 5.
        Ma nel livello 6 c'è qualcosa di nuovo, ora puoi anche calcolare.

        Nel livello 6 vengono aggiunti nuovi codici, ora puoi iniziare a calcolare nel tuo codice.

        Il vantaggio è facile, lo scrivi come con la matematica: `5 + 5` per esempio. Anche il segno meno funziona bene, che è `5 - 5`.

        I tempi sono un po 'diversi, perché non ci sono orari sulla tastiera. Basta cercare, non c'è davvero!
        Questo è il motivo per cui eseguiamo i tempi con l'asterisco sopra 8: `5 * 5`. Leggilo come 5 per 5, quindi lo ricorderai nel modo più semplice.
        ## Esempio di codice Hedy
        ```
        print '5 più 5 è ' 5 + 5
        print '5 meno 5 è ' 5 - 5
        print '5 per 5 è ' 5 * 5
         ```
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Example: print '5 per 5 è ' 5 * 5"
        demo_code: "print '5 per 5 è ' 5 * 5"
    -   name: "ask e if con calcoli"
        explanation: "Chiedi di fare un calcolo e giudicalo."
        example: "Esempio: risposta is ask Quanto fa 10 più 10?"
        demo_code: |-
            risposta is ask Quanto fa 10 più 10?
            if risposta is 20 print 'Yes!' else print 'Ops'
    -   name: "repeat"
        explanation: "`repeat` e `if` combinati"
        example: "Example: if prodotto is 50 repeat 3 times print 'corretto!' else repeat 5 times print 'errato!'"
        demo_code: |-
            prodotto is ask Quanto fa 10 per 5?
            if prodotto is 50 repeat 3 times print 'corretto!' else repeat 5 times print 'errato!'
7:
    start_code: |-
        repeat 5 times
            print 'Ciao a tutti'
            print 'Questo sarà scritto 5 volte'
    intro_text: |
        `ask` e `print` funzionano ancora come prima, ma ora `if` e `repeat` sono cambiati!
         Ora puoi ripetere più righe insieme. Quindi devi indentare le righe che vengono ripetute,
         ciò significa che devono iniziare con quattro spazi.
         Anche se vuoi ripetere solo una riga, devi indentare!
         ## Esempio di codice Hedy
         ```
         repeat 5 times
             print 'Ciao a tutti'
             print 'Questo sarà scritto 5 volte'
         ```
         Se usi un `repeat` e un `if` insieme devi indentare più e più volte.

         ## Esempio di codice Hedy
         ```
         colore is ask Qual è il tuo colore preferito?
         if colore is verde
           repeat 3 times
               print 'carino!'
         else
           repeat 5 times
               print 'mah'
         ```
    commands:
    -   name: "print"
        explanation: "Scrivi qualcosa. Ricorda di usare le virgolette per scrivere parole e frasi."
        example: "Esempio: print '5 volte 5 è ' 5 * 5"
        demo_code: "print '5 volte 5 è ' 5 * 5"
    -   name: "if con più righe"
        explanation: "Chiedi la risposta per una somma e controlla se è corretta. Ora possiamo scrivere due righe."
        example: "Esempio: risposta is ask Quanto fa 5 più 5?"
        demo_code: |-
            risposta is ask Quanto fa 5 più 5?
            if risposta è 10
                print 'Ben fatto!'
                print 'Esatto, la risposta corretta era ' risposta
            invece
                scrivi 'Ops!'
                scrivi 'La risposta è ' risposta
    -   name: "if e repeat insieme"
        explanation: "`if` e `repeat` insieme"
        example: "Esempio: if colore is verde repeat 3 times print 'carino!' else repeat 5 times print 'mah'"
        demo_code: |-
            colore is ask Qual è il tuo colore preferito?
            if colore is verde
                repeat 3 times
                    print 'carino!'
            else
                repeat 5 times
                    print 'mah'
