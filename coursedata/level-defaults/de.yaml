1:
    intro_text: |
        Willkommen bei Hedy! In Level 1 kannst du die Befehle `print`, `ask` und `echo` verwenden. 
        
        Hedy benutzt englische Wörter für Befehle wie die meisten Programmiersprachen. `print` bedeutet drucken oder auf den Bildschirm ausgeben, `ask` bedeutet fragen und `echo` bedeutet wiederholen.

        Auf der linken Seite deines Bildschirms befinden sich alle Befehle des Level 1.

        Drücke den blauen Knopf und der Code wird für dich ausgegeben!

        Probiere den Code selbst mit der grünen Schaltfläche 'Code ausführen' unter dem linken Programmierfeld aus.

        Du weißt nicht, was du erstellen sollst? Auf den nächsten Tabs findest du einige Ideen, was du erstellen kannst.
    start_code: "print Hallo Welt!"
    commands:
    -   name: "print"
        explanation: "Gib etwas mit `print` aus."
        example: "Beispiel: print Hallo willkommen bei Hedy!"
        demo_code: "print Hallo willkommen bei Hedy!"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: ask Was ist deine Lieblingsfarbe?"
        demo_code: "ask Was ist deine Lieblingsfarbe?"
    -   name: "echo"
        explanation: "Wiederhole etwas mit `echo`."
        example: "Beispiel: echo Also deine Lieblingsfarbe ist ..."
        demo_code: |-
            ask Was ist deine Lieblingsfarbe?
            echo Also deine Lieblingsfarbe ist ...
2:
    intro_text: |
        In Level 2 lernen wir etwas Neues. Du kannst ein Wort mit `is` benennen. `is` bedeutet ist. 

        Wenn Du den Code `name is Hedy` oben in Dein Programm einfügst, kannst du `name` überall verwenden. Er wird dann durch "Hedy" ersetzt.

        `ask` hat sich in Level 2 geändert. Die Antwort speicherst Du auch unter einem Namen ab:

        ```
        antwort is Wie heißt du?
        ```

        `print` funktioniert immer noch wie in Level 1, und Du benötigst `echo` nicht mehr.

        In Level 2 kannst Du auch eine Liste erstellen. Du kannst den Computer etwas zufällig aus der Liste auswählen lassen. Du machst dies mit `at random` (es bedeutet zufällig und man spricht es "ät rän-dum" aus).

        Du findest alle Befehle des Level 2 in der linken Leiste. Weitere Aufgaben findest du auf den folgenden Tabs.
    start_code: "print Hallo Welt!"
    commands:
    -   name: "is"
        explanation: "Gib einem Wort einen Namen mit `is`, den du in deinem Programm wiederverwenden kannst."
        example: "Beispiel: name is Hedy."
        demo_code: |-
            name is Hedy
            print Willkommen name
    -   name: "ask"
        explanation: "Frage etwas mit `ask`. Aber pass auf! Du musst der Antwort einen Namen mit `is` geben."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print Du magst am liebsten farbe
    -   name: "choose_random"
        explanation: "Wähle mit `at` und `random` zufällig ein Wort aus einer Gruppe aus."
        example: "Beispiel: tiere is Hund, Katze, Känguru."
        demo_code: |-
            tiere is Hund, Katze, Känguru
            print tiere at random
3:
    start_code: "print 'Hallo Welt'"
    intro_text: |
        `ask` ist in Level 3 immer noch dasselbe, aber `print` ist jetzt anders.

        Du musst Text, den du genau so mit `print` ausgeben möchtest, in Anführungszeichen setzen.

        Du kannst du jetzt alle Wörter ausgeben, die du möchtest. Auch die Wörter, mit denen du etwas mit `is` gespeichert hast.

        Die meisten Programmiersprachen verwenden beim `print` Befehl Anführungszeichen, sodass wir dem echten Programmieren einen Schritt näher kommen!

        ## Aufgaben werden immer schwieriger
        Du findest die Befehle wieder auf der linken Seite und die Aufgaben auf den folgenden Tabs. Die Aufgaben werden immer etwas schwieriger.
        Beginne darum links mit der Geschichte und arbeite dich für größere Herausforderungen weiter nach rechts vor.
    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "is"
        explanation: "Gib einem Text einen Namen und gib ihn ohne Anführungszeichen aus."
        example: "Beispiel: name is Hedy."
        demo_code: |-
            name is Hedy
            print 'Ich heisse ' name
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print 'Du magst am liebsten ' farbe
4:
    start_code: |-
        name is ask Wie heisst du?
        if name is Hedy print 'Toll!' else print 'Blöd'
    intro_text: |
        `ask` und `print` funktionieren immer noch wie in Level 3.

        In Level 4 gibt es etwas Neues, `if` und `else`! `if` ist Englisch für wenn, `else` bedeutet sonst. Mit `if` und `else` kannst du zwischen zwei verschiedenen Möglichkeiten wählen.

        ## Beispiel Hedy Code
        ```
        Name ist ask wie ist Ihr Name?
        if Name is Hedy print 'Toll!' else print 'Blöd!'
        ```

        Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Blöd!', wenn de etwas anderes eingibst.

        ## Aufgaben werden immer schwieriger

        Auch in Stube 4 werden die Aufgaben in den Tabs immer etwas schwieriger. Löse sie also von links nach rechts.

    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print 'Du magst am liebsten ' farbe
    -   name: "if"
        explanation: "Treffe eine Auswahl mit `if` und `else`"
        example: "Beispiel: if farbe is grün print 'Hübsch!' else print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün print 'Hübsch!' else print 'Bäh'
5:
    start_code: "repeat 3 times print 'Hedy macht Spaß!'"
    intro_text: |
        `ask`, `print` und `if` funktionieren genau wie in Stufe 4.
        Aber in Stufe 5 kommt der `repeat` Befehl dazu. 
        `repeat` bedeutet wiederhole.
        Mit `repeat` kannst du eine Befehlszeile mehrmals auszuführen. 
        Dabei kannst du angeben, wie oft etwas wiederholt werden soll.
        `repeat 3 times` bedeutet zum Beispiel wiederhole 3 mal.

        ## Beispiel Hedy code
        ```
        repeat 3 times print 'Hedy macht Spaß!'
        ```
    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print 'Du magst am liebsten ' farbe
    -   name: "if"
        explanation: "Treffe eine Auswahl mit `if` und `else`"
        example: "Beispiel: if farbe is grün print 'Hübsch!' else print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün print 'Hübsch!' else print 'Bäh'
    -   name: "repeat"
        explanation: "`repeat` und `if` kombiniert"
        example: "Beispiel: if farbe is grün repeat 3 times print 'Hübsch!' else repeat 5 times print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün repeat 3 times print 'Hübsch!' else repeat 5 times print 'Bäh'
6:
    start_code: "print '5 mal 5 ist ' 5 * 5"
    intro_text: |
        `ask`,` print`, `if` und `repeat` funktionieren immer noch wie in Level 4 und 5.
        Aber in Level 6 gibt es etwas Neues, das du jetzt auch berechnen kannst.

        In Level 6 werden neue Befehle hinzugefügt. Damit kannst du in deinem Code rechnen.

        Das Plus schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

        Das Mal sind etwas anders, da auf deiner Tastatur kein Malzeichen (`·`) vorhanden ist. Suche mal, das gibt es wirklich nicht!
        Deshalb multiplizieren wir mit dem Stern über dem Plus: `5 * 5`. Lies dies als 5 mal 5, dann kannst du dich am einfachsten daran erinnern.
        ## Beispiel Hedy Code
        ```
        print '5 plus 5 ist ' 5 + 5
        print '5 minus 5 ist ' 5 - 5
        print '5 mal 5 ist ' 5 * 5
        ```

    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print '5 mal 5 ist ' 5 * 5"
        demo_code: "print '5 mal 5 ist ' 5 * 5"
    -   name: "`ask` und `if` mit Berechnungen"
        explanation: "Frage nach einer Rechenaufgabe."
        example: "Beispiel: antwort is ask Was ist 10 plus 10?"
        demo_code: |-
            antwort is ask Was ist 10 plus 10?
            if antwort is 20 print 'Ja!' else print 'Ups'
    -   name: "repeat"
        explanation: "`repeat` und `if` kombiniert"
        example: "Beispiel: if antwort is 50 repeat 3 times print 'Richtig!' else repeat 5 times print 'Ups'"
        demo_code: |-
            antwort is ask Was ist 5 mal 10?
            if antwort is 50 repeat 3 times print 'Richtig!' else repeat 5 times print 'Ups'
7:
    start_code: |-
        repeat 5 times
            print 'Hello Leute'
            print 'Das wird 5 mal ausgegeben'
    intro_text: |
        `ask` und `print` funktionieren immer noch wie du sie kennst.
        Aber `if` und `repeat` haben sich verändert!
        Du kannst jetzt Befehlsgruppen zusammen ausführen, aber du musst die Befehle einrücken.
        Das heisst, du musst die Befehlszeile mit vier Leerzeichen beginnen.
        Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben möchtest.
        ## Beispiel Hedy-Code
        ```
        repeat 5 times
            print 'Hallo Leute'
            print 'Dies wird 5 mal wiederholt'
        ```

        Wenn du einen `repeat` mit einem `if` Befehl kombinierst, musst du jeden Block einrücken. Schau dir die Beispiele an, um es genauer zu sehen!"

        ## Beispiel Hedy-Code
        ```
        farbe is ask Was ist deine Lieblingsfarbe?
        if farbe is grün
            repeat 3 times
                print 'Hübsch!'
        else
            repeat 5 times
                print 'Bäh'
        ```

    commands:
    -   name: "print"
        explanation: "Gib etwas aus. Denke daran, Anführungszeichen für eine wörtliche Ausgabe zu verwenden."
        example: "Beispiel: print '5 mal 5 ist ' 5 * 5"
        demo_code: "print '5 mal 5 ist ' 5 * 5"
    -   name: "`if` mit mehreren Zeilen"
        explanation: "Frage nach einer Summe und prüfe, ob die Antwort richtig ist. Wir können jetzt zwei Zeilen ausgeben."
        example: "Beispiel: antwort is ask Was ist 5 plus 5?"
        demo_code: |-
            antwort is ask Was ist 5 plus 5?
            if antwort is 10
                print 'Gut gemacht!'
                print 'Die Antwort ist wirklich ' antwort
            else
                print 'Ups!'
                print 'Die Antwort is 10'
    -   name: "`if` und `repeat` kombiniert"
        explanation: "`if` und `repeat` kombiniert"
        example: "Beispiel: if farbe is grün repeat 3 times print 'Hübsch!' else repeat 5 times print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün
                repeat 3 times
                    print 'Hübsch!'
            else
                repeat 5 times
                    print 'Bäh'
8:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Bereit oder nicht, hier komme ich!'
    intro_text: |-
        `print` funktioniert genauso, aber `repeat` wird jetzt durch `for` ersetzt! 
        Du verwendest `for i in range 1 to 5`, anstelle von `repeat 5 times`. 
        `for i in range 1 to 5` bedeutet "für i im Bereich von 1 bis 5".
        Du kannst auch `i` in Deinem Programm verwenden! 
        Denke daran, Einrückungen nach den `for`- und `if`-Anweisungen zu verwenden (Das bedeutet, einen Satz mit vier Leerzeichen zu beginnen)."
    commands:
    -   explanation: "wir ersetzen `repeat` mit `for`"
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
              print i
            print 'Bereit oder nicht, hier komme ich!'
9:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Bereit oder nicht, hier komme ich!'
    intro_text: |-
        Jetzt werden wir ein wenig an der Einrückung ändern. 
        Jedes Mal, wenn wir eine Einrückung benötigen, brauchen wir `:` in der Zeile vor der Einrückung.
    commands:
    -   explanation: "Wenn wir ein `for` verwenden, müssen wir ein `:` hinter die `for`-Anweisung setzen!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 11:
                print i
            print 'Bereit oder nicht, hier komme ich!'
    -   explanation: "Wir müssen dasselbe mit allen unseren `if`-Anweisungen tun."
        example: "if farbe is grün:'"
        demo_code: |-
            farbe is grün
            if farbe is grün:
                print 'Die Farbe ist grün.'
            else:
                print 'Die Farbe ist nicht grün.'
    -   explanation: |-
            Wir zeigen euch einen neuen Befehl, den ihr verwenden könnt: `elif`. 
            `elif` steht für \"else if\". 
            Wir überprüfen zuerst, ob das `if` korrekt ist, wenn das nicht wahr ist, überprüfen wir das `elif` und wenn das auch nicht wahr ist, gehen wir zum `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a ist 1'
            elif a is 2:
                print 'a ist 2'
            else:
                print 'a ist nicht 1 oder 2'
10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
                print 'wir sind in Runde: ' i ' bei Nummer: ' j
    intro_text: |-
        Ab jetzt können wir eine Schleife öfters wiederholen. 
        Im Beispiel zählen wir bis 5 und machen das 3 Mal. 
        Wir machen also 3 Runden und zählen jedes Mal bis 5.
    commands:
    -   explanation: "Dies ist ein Beispiel der `for`-Anweisung."
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                    print 'wir sind in Runde: ' i ' bei Nummer: ' j
    -   explanation: "Dasselbe können wir mit `if`-Anweisungen machen"
        demo_code: |-
            farbe is blau
            farbezwei is gelb
            if farbe is blau:
                if farbezwei is gelb:
                    print 'Zusammen ergeben wir grün!'
11:
    start_code: |-
        alter is input('Wie alt bist du?')
        print('Also hast du bis jetzt diese Geburtstage gefeiert: ')
        for i in range(0,alter):
            print(i)
    intro_text: |-
        Statt `ask` benutzen wir jetzt den `input`-Befehl. 
        Außerdem benutzen wir setzen wir jetzt immer runde Klammern, wenn wir `print`, `input` oder `for` verwenden.
    commands:
    -   explanation: "Wir setzen jetzt Klammern hinter den `print`-Befehl!"
        example: "print('Hallo Welt')"
        demo_code: "print('Hallo Welt')"
    -   explanation: "Wir ersetzen `ask` und nennen es jetzt `input`. Außerdem verwenden wir Klammern."
        example: "name is input('Wie heißt du?')"
        demo_code: |-
            name is input('Wie heißt du?')
            print('Dein Name ist also ' name)
    -   explanation: "Wir setzen nun Klammern um die Zahlen in der `for`-Schleife."
        example: "for i in range(0,10):"
        demo_code: |-
            for i in range(0,10):
                print(i)
            print('Bereit oder nicht, hier komme ich!')
12:
    start_code: |-
        fruechte is ['Apfel', 'Banane', 'Kirsche']
        print(fruechte)
    intro_text: |-
        Wir werden eckige Klammern um Listen setzen! 
        Außerdem müssen wir jetzt einfache Anführungszeichen `'` um Elemente in Listen setzen.
    commands:
    -   explanation: |-
            Wir werden eckige Klammern um Listen setzen! 
            Wir müssen auch `'` um Elemente in Listen setzen.
        example: "fruechte is ['Apfel', 'Banane', 'Kirsche']"
        demo_code: |-
            fruechte is ['Apfel', 'Banane', 'Kirsche']
            print(fruechte)
    -   name: "Nimm ein Element aus einer Liste"
        explanation: |-
            Um ein Element aus einer Liste zu erhalten, verwenden wir `[Zahl]`. 
            Mit `fruechte[1]` erhalten wir also die erste Frucht aus der Liste.
        example: "erste_frucht is fruechte[1]"
        demo_code: |-
            fruechte is ['Apfel', 'Banane', 'Kirsche']
            erste_frucht is fruechte[1]
            print(erste_frucht)
    -   name: "Nimm ein zufälliges Element aus einer Liste"
        explanation: |-
            Um ein zufälliges Element aus einer Liste zu erhalten, verwenden wir `[random]`. 
            Mit fruechte[random] erhalten wir also eine zufällige Frucht aus der Liste.
        example: "zufaellige_frucht is fruechte[random]"
        demo_code: |-
            fruechte is ['Apfel', 'Banane', 'Kirsche']
            zufaellige_frucht is fruechte[random]
            print(zufaellige_frucht)
13:
    start_code: |-
        du_bist_noch_hier is False
        bist_du_noch_hier is input('Bist du noch hier? ja oder nein?')
        if bist_du_noch_hier is ja:
            du_bist_noch_hier is True
        if du_bist_noch_hier is True:
            print('Hallo!')
        if du_bist_noch_hier is False:
            print('Tschüss!')
    intro_text: |-
        Ab jetzt kannst du Variablen als wahr (`True`) oder falsch (`False`) definieren. 
        Du kannst dies zum Beispiel verwenden, um abzuspeichern, ob eine Antwort wahr oder falsch war. 
    commands:
    -   name: "Beispiel"
        explanation: |-
            In diesem Beispiel verwenden wir `True` und `False`, um die Antwort auf eine Frage festzuhalten. 
            Du kannst 5 Mal antworten. 
            Wenn die Antwort richtig ist, wird `richtige_antwort` `True` sein.
        example: "`richtige_antwort` ist `False`"
        demo_code: |-
          for i in range(1,5):
              richtige_antwort is False
              antwort is input('Wieviel ist 5*5')
              if antwort is 25:
                  richtige_antwort is True
              else:
                  richtige_antwort is False
              if richtige_antwort is True:
                  print('Das ist richtig!')
              if richtige_antwort is False:
                  print('Das ist leider falsch! Du hast noch ' 5-i ' Versuche übrig.')
14:
    start_code: |-
        du_bist_noch_hier is False
        bist_du_noch_hier is input('Bist du noch hier? ja oder nein?')
        if bist_du_noch_hier is ja:
            du_bist_noch_hier is True
        antwort is input('Wieviel ist 5*5')
        if du_bist_noch_hier is True and antwort is 25:
            print('Du hast ja gesagt und die richtige Antwort gegeben!')
    intro_text: |-
        Wir werden jetzt `and` und `or` lernen! Wenn du zwei Angaben überprüfen willst, musst du nicht zwei `if` verwenden, sondern kannst `und` und `oder` benutzen. 
        Wenn du `und` verwendest, müssen beide Angaben, links und rechts vom `und`, wahr sein. 
        Du kannst auch `oder` verwenden. 
        Dann muss nur eine Aussage richtig sein.
    commands:
    -   name: "`and`"
        explanation: "Beide Angaben (links und rechts vom `and`) müssen richtig sein."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
          antwort1 is input('Was ergibt 3+2?')
          antwort2 is input('Was ergibt 2+2?')
          if antwort1 is 5 and antwort2 is 4:
              print('Beide Antworten sind richtig!')
          else:
              print('Mindestens eine Antwort ist falsch.')
    -   name: "`or`"
        explanation: |-
            Mindestens eine der beiden Aussagen links und rechts vom `or`, muss richtig sein. 
            Wenn beide richtig sind, ist es auch in Ordnung.
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
          antwort1 is input('Was ergibt 3+2?')
          antwort2 is input('Was ergibt 2+2?')
          if antwort1 is 5 or antwort2 is 4:
              print('Mindestens eine Antwort ist richtig!')
          else:
              print('Beide Antworten sind falsch.')
15:
    start_code: |-
        # Dieses Programm wird ein paar mathematische Fragen stellen
        for i in range(1,10):
            # Wir werden die Multiplikationstabelle der 5 abfragen
            antwort is input('Was ergibt ' i ' mal 5?')
            # Wir prüfen, ob die Antwort mit unserer übereinstimmt
            korrekte_antwort is i * 5
            if antwort is korrekte_antwort:
                print(antwort ' ist korrekt!')
            else:
                print('Das ist falsch. Die richtige Antwort lautet: ' i*5)
    intro_text: |-
        Wenn du größere Programme erstellst, brauchst du einen Weg, um dir zu merken, was jedes Codestück tut. 
        Wir verwenden dafür Kommentare. 
        Ein Kommentar sieht folgendermaßen aus:\n ` # Dies ist ein Kommentar`. 
        Alles nach dem `#` wird für den Code unsichtbar.
    commands:
    -   name: "Kommentar"
        explanation: "Wir können Kommentare platzieren, wo immer wir wollen."
        example: "# Dies ist ein Kommentar"
        demo_code: |-
            # Dieses Programm gibt Hallo! aus
            # Es ist in Hedy erstellt worden
            # Es macht nichts, außer Hallo! zu auszugeben
            print('Hallo!')
16:
    start_code: |-
        alter is input('Wie alt bist du?')
        if alter < 12:
            print('Du bist jünger als ich!')
        elif alter > 12:
            print('Du bist älter als ich!')
    intro_text: |-
        Wir lernen weitere neue Elemente kennen! 
        Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen 
        Das `<` prüft, ob die erste Zahl kleiner ist als die zweite, wie `4 < 5`. 
        Das `>` prüft, ob die erste Zahl größer als die zweite ist, wie z.B. `6 > 5`.
    commands:
    -   name: "Kleiner"
        explanation: |-
            Wir verwenden das `<`, um zu prüfen, ob die erste Zahl kleiner als die zweite Zahl ist. 
            Wenn wir zum Beispiel sehen wollen, ob eine Variable kleiner als 15 ist, verwenden wir `variable < 15`.
        example: "alter < 12"
        demo_code: |-
            alter is input('Wie alt bist du?')
            if alter < 12:
                print('Du bist jünger als ich!')
    -   name: "Größer"
        explanation: |-
            Wir verwenden das `>`, um zu prüfen, ob die erste Zahl größer als die zweite Zahl ist. 
            Wenn wir zum Beispiel sehen wollen, ob eine Variable größer als 15 ist, verwenden wir `variable > 15`.
        example: "alter > 12"
        demo_code: |-
            alter is input('Wie alt bist du?')
            if alter > 12:
                print('Du bist älter als ich!')
17:
    start_code: |-
        richtige_antwort is False
        # wir fahren fort, bis die richtige Antwort gegeben wurde!
        while richtige_antwort is False:
            antwort is input('Wieviel ist 5 mal 5?')
            if antwort is 25:
                richtige_antwort is True
                print('Das ist die richtge Antwort!')
    intro_text: |- 
        Wir werden eine neue Schleife lernen, die `while`-Schleife! 
        Wir setzen die Schleife so lange fort, bis die Anweisung wahr/gültig ist! 
        Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde. 
        Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
    commands:
    -   name: "Boolesches while"
        explanation: "Wir können die `while`-Schleife mit `True` und `False` verwenden."
        example: "while richtige_antwort is False"
        demo_code: |-
            richtige_antwort is False
            # wir fahren fort, bis die richtige Antwort gegeben wurde!
            while richtige_antwort is False:
                antwort is input('Wieviel ist 5 mal 5?')
                if antwort is 25:
                    richtige_antwort is True
                    print('Das ist die richtge Antwort!')
    -   name: "while mit Ungleichungen"
        explanation: |-
            Wir können die "while"-Schleife auch mit "<" und ">" verwenden. 
            Beachte, dass du die Zahl ändern musst, damit die Schleife endet. 
            Wir machen das hier mit `zaehler is zaehler + 1`.
        example: "while zaehler < 3"
        demo_code: |-
            zaehler is 1
            # wir fahren fort, bis der Zählerstand 3 ist!
            while zaehler < 3:
                print('Wir machen dies noch ' 3 - zaehler ' mal.')
                zaehler is zaehler + 1
            print('Wir sind fertig!')
